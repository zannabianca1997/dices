//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.2

use chrono::{DateTime, FixedOffset};
use derive_more::derive::Display;
use sea_orm::{entity::prelude::*, TryFromU64};
use serde::{Deserialize, Serialize};
use utoipa::ToSchema;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, ToSchema)]
#[sea_orm(schema_name = "public", table_name = "session")]
#[schema(as=Session)]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    /// The session ID
    pub id: SessionId,
    #[sea_orm(column_type = "Text")]
    /// The session name
    pub name: String,
    #[sea_orm(column_type = "Text", nullable)]
    /// Optional long session description
    pub description: Option<String>,
    /// The creation time of the session
    pub created_at: DateTime<FixedOffset>,
}

#[derive(
    Debug, Clone, Copy, PartialEq, Eq, DeriveValueType, Serialize, Deserialize, ToSchema, Display,
)]
pub struct SessionId(Uuid);

impl SessionId {
    #[must_use]
    pub fn gen() -> Self {
        Self(Uuid::new_v4())
    }
}

impl TryFromU64 for SessionId {
    fn try_from_u64(n: u64) -> Result<Self, DbErr> {
        Uuid::try_from_u64(n).map(Self)
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_one = "super::engine::Entity")]
    Engine,
    #[sea_orm(has_many = "super::session_user::Entity")]
    SessionUser,
}

impl Related<super::engine::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Engine.def()
    }
}

impl Related<super::session_user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SessionUser.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        super::session_user::Relation::User.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::session_user::Relation::Session.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
