//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.2

use crate::{session::SessionId, user::UserId};

use super::sea_orm_active_enums::UserRole;
use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Copy, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(schema_name = "public", table_name = "session_user")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub session: SessionId,
    #[sea_orm(primary_key, auto_increment = false)]
    pub user: UserId,
    pub role: UserRole,
    pub added_at: DateTimeWithTimeZone,
    pub last_access: Option<DateTimeWithTimeZone>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::session::Entity",
        from = "Column::Session",
        to = "super::session::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Session,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::User",
        to = "super::user::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    User,
}

impl Related<super::session::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Session.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
