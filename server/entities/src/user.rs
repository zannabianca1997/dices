//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.2

use derive_more::derive::{From, Into};
use sea_orm::{entity::prelude::*, sqlx::types::uuid, TryFromU64};
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(schema_name = "public", table_name = "user")]
pub struct Model {
    /// The user id
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: UserId,
    /// The user name
    #[sea_orm(column_type = "Text", unique)]
    pub name: String,
    /// The user password
    #[sea_orm(column_type = "Text")]
    #[serde(skip)]
    pub password: PasswordHash,
    /// The moment the user was created
    pub created_at: DateTimeWithTimeZone,
    /// The last access of this user
    pub last_access: DateTimeWithTimeZone,
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, DeriveValueType, Serialize, Deserialize)]
#[repr(transparent)]
pub struct UserId(Uuid);

impl UserId {
    pub fn gen() -> Self {
        Self(uuid::Uuid::new_v4())
    }

    pub fn as_bytes(&self) -> &[u8; 16] {
        self.0.as_bytes()
    }
}

impl TryFromU64 for UserId {
    fn try_from_u64(n: u64) -> Result<Self, DbErr> {
        Uuid::try_from_u64(n).map(Self)
    }
}

#[derive(Debug, Clone, From, Into, PartialEq, Eq, PartialOrd, Ord, Hash, DeriveValueType)]
#[repr(transparent)]
pub struct PasswordHash(String);

impl PasswordHash {
    pub fn as_str(&self) -> &str {
        &self.0
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::session_user::Entity")]
    SessionUser,
}

impl Related<super::session_user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SessionUser.def()
    }
}

impl Related<super::session::Entity> for Entity {
    fn to() -> RelationDef {
        super::session_user::Relation::Session.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::session_user::Relation::User.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
